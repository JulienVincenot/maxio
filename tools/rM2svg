#!/usr/bin/env python3
import sys
import struct
import os.path
import argparse


__prog_name__ = "rM2svn"
__version__ = "0.0.1beta"


# Size
x_width = 1404
y_width = 1872

# Mappings
stroke_colour={
    0 : "black",
    1 : "grey",
    2 : "white",
}
stroke_width={
    0x3ff00000 : 1,
    0x40000000 : 5,
    0x40080000 : 10,
}


def main():
    parser = argparse.ArgumentParser(prog=__prog_name__)
    parser.add_argument("-i",
                        "--input",
                        help=".lines input file",
                        required=True,
                        metavar="FILENAME",
                        )
    parser.add_argument("-o",
                        "--output",
                        help="prefix for output file",
                        required=True,
                        metavar="NAME",
                        )
    args = parser.parse_args()

    if not os.path.exists(args.input):
        parser.error('The file "{}" does not exist!'.format(args.input))

    lines2svn(args.input, args.output)


def abort(msg):
    print(msg, file=sys.stderr)
    sys.exit(1)


def lines2svn(input_file, output_name):
    # Read the file in memory. Consider optimising by reading chunks.
    with open(input_file, 'rb') as f:
        data = f.read()
    offset = 0

    if output_name.endswith(".svn"):
        output_name = output_name[:-4]

    # Is this a reMarkable .lines file?
    expected_header=b'reMarkable lines with selections and layers'
    if len(data) < len(expected_header) + 4:
        abort('File too short to be a valid file')

    fmt = '<{}sI'.format(len(expected_header))
    header, npages = struct.unpack_from(fmt, data, offset); offset += struct.calcsize(fmt)
    if header != expected_header or npages < 1:
        abort('Not a valid reMarkable file: <header={}><npages={}>'.format(header, npages))


    # Iterate through pages (There is at least one)
    for page in range(npages):
        output = open("{}_{:02}.svn".format(output_name, page+1), 'w')

        # Merging all layers in the same svg, for now
        output.write('<svg height="{}" width="{}">\n'.format(y_width, x_width)) # BEGIN notebook

        fmt = '<BBH' # TODO might be 'I'
        nlayers, b_unk, h_unk = struct.unpack_from(fmt, data, offset); offset += struct.calcsize(fmt)
        if b_unk != 0 or h_unk != 0: # Might indicate which layers are visible.
            print('Unexpected value on page {} after nlayers'.format(page + 1))

        # Iterate through layers on the page (There is at least one)
        for layer in range(nlayers):
            fmt = '<I'
            (nstrokes,) = struct.unpack_from(fmt, data, offset); offset += struct.calcsize(fmt)

            # Iterate through the strokes in the layer (If there is any)
            for stroke in range(nstrokes):
                fmt = '<IIIII'
                pen, colour, i_unk, width, nsegments = struct.unpack_from(fmt, data, offset); offset += struct.calcsize(fmt)
                if i_unk != 0: # No theory on that one
                    print('Unexpected value at offset {}'.format(offset - 12))
                output.write('<polyline style="fill:none;stroke:{};stroke-width:{}" points="'.format(stroke_colour[colour], stroke_width[width])) # BEGIN stroke

                # Iterate through the segments to form a polyline
                for segment in range(nsegments):
                    fmt = '<ffIII'
                    xpos, ypos, tilt, pressure, i_unk2 = struct.unpack_from(fmt, data, offset); offset += struct.calcsize(fmt)
                    output.write('{:.3f},{:.3f} '.format(xpos, ypos)) # BEGIN and END polyline segment

                output.write('" />\n') # END stroke

        output.write('</svg>') # END notebook
        output.close()

main()
